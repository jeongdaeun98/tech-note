# 추상 클래스와 인터페이스

## 추상 클래스

```
public abstract class AbstractClass {
  public void function() {};
  public abstract void abstractFunction();
}
```

### 특징

반드시 재정의 해야하는 메소드를 1개 이상 가지고 있는 클래스

클래스 정의 시, abstract를 붙여주고, 재정의 해야하는 메소드에도 abstract 키워드 표기

## 인터페이스

```
public interface Interface {
  public int max = 10; // 상수, 무조건 인터페이스에서 제공하는 값을 사용
  public abstract void abstractFunction(); // 추상 메소드: 일반 클래스에서 오버리이딩 필수
  default void function(){} // default 메소드: 인터페이스에서 제공하는 것을 사용하거나 일반 클래스에서 따로 구현하여 사용할 수 있음
  // 추가 요건으로 메소드를 추가할 때, default를 사용하면 유지보수성을 높일 수 있음
  // 추상 메소드를 추가하면 일반 클래스에서 이를 구현하지 않으면 모두 에러가 발생하기 때문
  static void function2(){} // 정적 메소드: 무조건 인터페이스에서 제공하는 것을 사용
}
```

### 특징

- 추상 클래스의 일종으로 default, static 메소드를 제외하면 abstract 메소드와 상수만 가짐
- interface 키워드를 통해 선언, implements로 일반 클래스에서 인터페이스 구현

## 공통점

- 두 개념 모두 독립적으로 객체 생성 불가, 상속을 목적으로 사용
- 추상 메소드는 오버라이딩 필요

## 차이점

- 추상 클래스는 다중 상속 불가능, 인터페이스는 다중 상속 가능
- 추상클래스는 상속을 통해 기능 확장이 목적
- 인터페이스는 구현을 강제하므로 구현 객체의 같은 동작을 보장하여, 서로 관계가 없는 객체들이 상호작용 가능하게 함.
